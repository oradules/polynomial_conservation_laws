//////////////////////////////////////////////////////////////////////////////
version=" June 2023 "; //
info="
LIBRARY:  polconslaw.lib

AUTHORS; Christoph L\"uders, University of Kassel, Kassel, Germany
Hamid Rahkooy, University of Oxford, UK.

OVERVIEW:
Computes polynomial conservation laws for each branch of CGS.


NOTATIONS: Before calling any routine of the library,
          the user  must define the ideal QQ[k(1..m)][x(1..n)], and all the
          input polynomials and  ideals defined on it.

PROCEDURES:

";

LIB "grobcov.lib";
LIB "curl.lib";
LIB "syzygy_basis.lib";
LIB "integration.lib";
LIB "genpolconslaw.lib";
LIB "specialisation.lib";


// ************ Begin of the polconslaw library *********************

// Algorithm ParametricPolynomialConservationLawsViaSyzygies
// Input:
   // J: steady state ideal in ring r
   // deg_bound: degree bound
// Ring and variables must be defined before running the library
// Ex. ring r=(0,k(1..5)),(x(1..5)),dp;
// poly f=3*k(1)*x(1);
// poly g=k(1)*x(1)+x(2);
// ideal J=f,g;

proc polconslaw(ideal J, int deg_bound) {
    option (noredefine);

    print("Steady State Ideal:"); J;

    // build list of ring variables
    list v;
    int numvar = size(ringlist(basering)[2]);
    for (int i=1; i<=numvar; i++) {
        v[i] = var(i);
    }
    //print("variable list"), v;

    "Degree bound set to", deg_bound;

    //Computing Comprehensive Groebner System
    list C = cgsdr(J);
    print("Number of branches ="), size(C);
    //print("Comprehensive Groebner System:"), C;

    int num_branches_nzconslaw = 0;
    list ParPolConsLaws;

    for (int i=1; i<=size(C); i++) {
        // TAKE SEMIALGEBRAIC SETS C[i][1] (which should be a set of parameters) and 
        // evaluate f(p=0) for each f in the input ideal J and p in the semialgebraic set. 
        // This should give a new ideal and we compute syz for this ideal.
        list F = specialise_ideal(J, C[i][1]);
        ideal I = list_to_matrix(F);

        //OPTION 2: Take GB in the GBS, compute its Syz and convert to syz of F:
        //print("Groebner basis of branches:"), C[i][3];
        //ideal I = list_to_matrix(C[i][3]);

        module S = syz(I);
        //print("Syzygy Module of Branch i:"), S;

        //Convert syzygy of G_i=C[i][3] into syzygy of original system F: J=I*B
        //matrix B=lift(I,J);
        //module S = S*B;
        //MUST COMPUTE KERNERL OF THE CONVERSION MATRIX B AND ADD IT TO S (EXAMPLE 6.11):    //S = insert(S,kernel(B));
        //print("Syzygy Module of F_i:"), S;

        // Computing a generating set for the Q-vector space of Syzygies as in Remark 6.9
        list GenS = multiply_by_monomials(S, v, deg_bound);
	// "VS Gens"; GenS;

        // Computing a basis for the Q-vector space of Syzygies as in Remark 6.9
        list basis_syz = basis_syzygy(GenS[1]);
	// print("Syz VS basis:"); basis_syz;

        // Computing curl of the elements of basis_syz is not enough because linear combination of curl non-zero elments may be zero. So one must check the linear combination of curl non-zero elements as well. This corresponds to computing kernelf oa curl as a linear map (see Prop. 6.22). Tihs is done via ansatz:
        list lincomb = find_linear_combinations(basis_syz, v);

        list curl_zero_syz = lincomb[1] + lincomb[2];

        list ret = compute_conslaw_nzcurl(I, curl_zero_syz, v);
        list ConsLaws = ret[1];
        int deg1 = ret[2];
        int degn1 = ret[3];

        // Creating List of Cons Laws, w the corresp. branch of CGS and parameters, if there exist any Cons Law
        if (size(ConsLaws) != 0) {
            ParPolConsLaws[i] = insert(ParPolConsLaws, (C[i][1], C[i][2], ConsLaws));
            //print(ParPolConsLaws[i]);
            num_branches_nzconslaw++;

            "Branch #", i, "has", size(ConsLaws), "non-zero conservation laws;", deg1, "linear,", degn1, "non-linear";
        }
    }
    print("Number of branches with non-zero conservation laws ="), num_branches_nzconslaw;

    return (ParPolConsLaws);
};


proc list_to_matrix(l) {
    // convert list to matrix
    matrix m[1][size(l)];
    for (int j=1; j<=size(l); j++) {
        m[1,j] = l[j];
    }
    return (m);
};


proc test_polconslaw1() {
    ring r = (0, k(1..3)), x(1..2), dp;
    ideal J = k(1)*x(2), k(2)*x(1);
    polconslaw(J, 2);
}


proc test_all() {
    test_genpol_all();
    test_specialise_ideal();
}

proc example6_30() {
    ring r=(0,k(1..2)), x(1..3), (lp,C);
    ideal J2=-k(1)*x(1),-k(2)*x(2),(k(1)+k(2))*x(1)*x(2);
    polconslaw(J2,3);
}

proc bm_629() {
    ring r = (0, k(1),k(2),k(3),k(4),k(5)), (x(1),x(2),x(3),x(4),x(5)), (dp,c);
    ideal I =
((k(3)*x(2)) + (-1*k(2)*x(1)*x(3))),
((k(5)*x(5)) + (-1*k(3)*x(2)) + (k(2)*x(1)*x(3)) + (-1*k(4)*x(2)*x(4))),
((k(3)*x(2)) + (-1*k(2)*x(1)*x(3))),
((k(5)*x(5)) + (-1*k(4)*x(2)*x(4))),
((-1*k(5)*x(5)) + (k(4)*x(2)*x(4)));
    def ret = polconslaw(I, 3);
};
//***********End of polconslas library***************************
